from itertools import product
import re
from turtle import st
from django.shortcuts import get_object_or_404, redirect, render
from .models import Project, Link, Subdomain, HttpServices
from .forms import Links, ProjectName, SubdomainForm, HttpsServicesForm

# Create your views here.


def index(request):

    return render(request, 'index.html')


def projects(request):

    projects = Project.objects.all()
    return render(request, 'projects.html', {'projects': projects})


def create_project(request):

    form = ProjectName(request.POST or None)

    if request.method == 'GET':

        context = {
            'form': form,
        }

        return render(request, 'projectinput.html', context)
    elif request.method == 'POST':

        if form.is_valid():
            form.save()

        return redirect('core:subdomain', id=form.instance.id)


def subdomain_enumarotor(request, id):
    try:
        project_id = get_object_or_404(Project, id = id)
        project_id = project_id.id
        links = Link.objects.filter( project_id = id)
        all_links = ''
        allsubdomains = ''
        subdomains = Subdomain.objects.filter(project = project_id)
        for i in links:
            all_links = all_links + str(i) + '\r\n'
        for i in subdomains:
            allsubdomains = allsubdomains + str(i) + '\r\n'
    except:
        print('There is no enumareted links.')
    
    

    try:
        sub_data = {'subdomains':allsubdomains}
        link_data = {'links':all_links}
    except:
        link_data = {'links':'There is no project with that id'}
        sub_data = {'subdomains':'There is no project with that id'}

    links_form = Links(request.POST or None, request.FILES or None, initial=link_data)
    subodmains_form = SubdomainForm(request.POST or None, request.FILES or None, initial=sub_data)


    if request.method == 'GET':
        context = {
            'links': links_form,
            'subdomains': subodmains_form
        }
        return render(request, 'enumarator.html', context)

    elif request.method == 'POST':
        if 'link-box' in request.POST:
            if links_form.is_valid():
                """
                Dosya yükleme ve okuma işlemi burada gerçekleşiyor.
                Dosyayı kaydetmiyoruz. İçini okuyup database save'ine göndericez.
                """                
                links_form_file = request.FILES['links_file']

                for chunk in links_form_file.chunks():
                    print(chunk)

                links_form.save(id)
            return redirect(request.META['HTTP_REFERER'])
###Gelecek için
        elif 'subdomains' in request.POST:
            if subodmains_form.is_valid():
                subodmains_form.save(id)

            # return redirect(request.META['HTTP_REFERER'])
            # pass
            return redirect("core:http", id = id)


def http(request, id):


    try:
        project_id = get_object_or_404(Project, id = id)
        project_id = project_id.id
        subdomains = Subdomain.objects.filter( project = project_id)
        https_services = HttpServices.objects.filter(project = project_id)
        all_subdomains = ''
        all_https = ''
        for i in subdomains:
            all_subdomains = all_subdomains + str(i) + '\r\n'
        for i in https_services:
            all_https = all_https +  str(i) + '\r\n'
    except:
        print('There is no enumareted links.')
    
    

    try:
        sub_data = {'subdomains':all_subdomains}
        http_data = {'http_services':all_https}
    except:
        http_data = {'links':'There is no project with that id'}
        sub_data = {'subdomains':'There is no project with that id'}

    subodmains_form = SubdomainForm(request.POST or None, request.FILES or None, initial=sub_data)
    http_services_form = HttpsServicesForm(request.POST or None, initial=http_data)


    if request.method == 'GET':
        pass
    elif request.method == 'POST':
        if "subdomain-box" in request.POST:
            if subodmains_form.is_valid():
                subodmains_form.save(id)



                return redirect(request.META['HTTP_REFERER'])




        pass




    context = {
        "httpservices":http_services_form,
        "subdomains": subodmains_form
        
    }


    return render(request, "http.html", context)